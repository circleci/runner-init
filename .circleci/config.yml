version: 2.1

orbs:
  slack: circleci/slack@4.13.3

workflows:
  main-workflow:
    jobs:
      - prepare-agents:
          context: org-global
      - build-and-publish-images:
          name: build-and-publish-image-amd64
          context: org-global
          requires:
            - prepare-agents
      - build-and-publish-images:
          name: build-and-publish-image-arm64
          resource: arm.medium
          arch: arm64
          context: org-global
          requires:
            - prepare-agents
      - publish-manifest:
          context: org-global
          filters:
            branches:
              only:
                - main
          requires:
            - build-and-publish-image-amd64
            - build-and-publish-image-arm64

parameters:
  release-name:
    type: string
    default: "runner-init"

jobs:
  prepare-agents:
    machine:
      image: ubuntu-2204:2024.02.7
      resource_class: large
    steps:
      - checkout
      - docker_login
      - run: ./do build-fake-agents
      - run: ./do download-taskagents
      - persist_to_workspace:
          root: .
          paths:
            - "./bin/circleci-*"
      - notify_failing_main

  build-and-publish-images:
    parameters:
      resource:
        type: string
        default: small
      arch:
        type: string
        default: amd64
    machine:
      image: ubuntu-2204:2024.02.7
      resource_class: << parameters.resource>>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - docker_login
      - run: ./do build-docker-images << pipeline.parameters.release-name >> << parameters.arch >>
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run: ./do publish-docker-images << pipeline.parameters.release-name >> << parameters.arch >>
      - notify_failing_main

  publish-manifest:
    machine:
      image: ubuntu-2204:2024.02.7
      resource_class: small
    steps:
      - checkout
      - docker_login
      - run: ./do publish-docker-manifest << pipeline.parameters.release-name >>
      - notify_failing_main

commands:
  docker_login:
    steps:
      - run:
          name: "Log into Docker Hub"
          command: |
            docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
    
  notify_failing_main:
    steps:
      - slack/notify:
          channel: runner-alerts
          branch_pattern: main
          event: fail
          template: basic_fail_1
