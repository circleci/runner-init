version: 2.1

orbs:
  slack: circleci/slack@4.13.3

executors:
  go:
    docker:
      - image: cimg/go:1.22
    resource_class: circleci-runner/rum-large
  ccc:
    docker:
      - image: circleci/command-convenience:0.1
        auth:
          username: ${DOCKER_HUB_USER}
          password: ${DOCKER_HUB_PASSWORD}
  linux_machine:
    machine:
      image: ubuntu-2204:2024.02.7
      resource_class: large

workflows:
  main-workflow:
    jobs:
      - lint
      - test
      - build
      - scan:
          context: [ org-global ]
          requires: [ build ]
      - images:
          context: [ org-global ]
          requires: [ lint, test, build, scan ]

jobs:
  lint:
    executor: go
    steps:
      - setup
      - run:
          name: Lint report
          command: ./do lint-report
      - run:
          name: Check `go mod tidy`
          command: |
            ./do go-mod-tidy
            git --no-pager diff --exit-code go.mod go.sum
      - run:
          name: Check the CHANGELOG.md has been updated
          command: |
            if [[ -z "${CIRCLE_PULL_REQUEST}" ]] && [[ "${CIRCLE_BRANCH}" != 'main' ]]; then
              echo 'Only check on a PR or main' && exit 0
            fi

            if git --no-pager diff main --exit-code CHANGELOG.md; then
              # Only check actual customer-facing changes have been made
              git --no-pager diff main --exit-code -- \
                ':*.go' \
                ':*Dockerfile' \
                ':!*_test.go' \
                ':!*internal/*'
            fi
      - run:
          name: Try running `./do lint --fix` if this fails
          command: ./do lint
          when: on_fail
      - store_results
      - notify_failing_main

  test:
    executor: go
    steps:
      - setup
      - run: ./do test
      - notify_failing_main

  build:
    executor: go
    steps:
      - goreleaser_setup
      - run: go mod download
      - run:
          name: Build binaries
          command: |
            BUILD_VERSION="$(<version.txt)-<< pipeline.number >>-$(git rev-parse --short HEAD 2>/dev/null || echo latest)" \
              ./do build
      - persist_to_workspace:
          root: .
          paths: [ target ]
      - notify_failing_main

  images:
    executor: linux_machine
    steps:
      - goreleaser_setup
      - docker_login
      - run:
          name: Build and maybe push images
          command: |
            SKIP_PUSH=$(if [ "$CIRCLE_BRANCH" == "main" ]; then echo "false"; else echo "true"; fi) \
              ./do images

  scan:
    executor: ccc
    parallelism: 4
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Select Docker image combinations for scanning
          command: |
            archs='amd64 arm64'
            for path in $(find docker/*Dockerfile); do
              for arch in ${archs}; do
                printf "${path} ${arch}\n" >>images.txt
              done
            done
            cat images.txt
            echo "Selecting '$(circleci-agent tests split images.txt)' for scanning"
      - run:
          name: Scan selected Docker images
          command: |
            while IFS=' ' read -r path arch; do
              echo "Scanning ${path} ${arch}"
              name=${path//\//_}-${arch}
              NAME=${name,,} \
                DOCKERFILE_PATH=${path} \
                EXTRA_DOCKER_BUILD_ARGS="--build-arg ARCH=${arch}" \
                scan
            done \<<<$(circleci-agent tests split images.txt)
      - run:
          name: Check artifacts for scan results
          command: ls ccc-image-scan-results && false
          when: on_fail
      - store_artifacts:
          path: ccc-image-scan-results
      - notify_failing_main

commands:
  setup:
    steps:
      - checkout
      - run: go mod download
      - run: ./do install-devtools

  store_results:
    steps:
      - run:
          name: Strip ANSI codes from xunit output
          when: always
          command: |
            # The test output produces ANSI codes, which the XML writer converts into annoying
            # \0xfffd characters - we'll strip these out to make the XML a bit more readable
            sed -i 's/ï¿½\[[0-9;]*[a-zA-Z]//g' test-reports/*.xml || true
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports

  goreleaser_setup:
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install GoReleaser
          command: |
            if [[ "$(command -v apk)" ]]; then
              # Alpine doesn't come with the coreutils' sha256sum, which the GoReleaser Bash script expects...
              apk upgrade && apk add coreutils
            fi

            curl -sfL https://goreleaser.com/static/run -o ./bin/goreleaser --create-dirs && chmod +x ./bin/goreleaser

            if [[ $(uname -m) == aarch64 ]]; then
              # A little hack to get the GoReleaser Bash script working on ARM64...
              sed -i 's/$(uname -m)/arm64/g' ./bin/goreleaser
            fi

  docker_login:
    steps:
      - run:
          name: "Log into Docker Hub"
          command: |
            docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"

  notify_failing_main:
    steps:
      - slack/notify:
          channel: runner-alerts
          branch_pattern: main
          event: fail
          template: basic_fail_1
