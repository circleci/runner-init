version: 2

dist: ./target/build-dockers

builds:
  - skip: true

release:
  disable: true # this stops GoReleaser from trying to add git tags itself

dockers:
  # Linux images
  - id: init-amd64
    image_templates: ["circleci/runner-init:agent-amd64{{.Env.IMAGE_TAG_SUFFIX}}"]
    skip_push: "{{.Env.SKIP_PUSH}}"
    dockerfile: ./docker/Dockerfile
    use: buildx
    build_flag_templates:
      - "--platform=linux/amd64"
      - "--build-arg=PICARD_VERSION={{.Env.PICARD_VERSION}}"
    extra_files:
      - ./target/bin/linux/amd64/orchestrator
  - id: init-arm64
    image_templates: ["circleci/runner-init:agent-arm64{{.Env.IMAGE_TAG_SUFFIX}}"]
    skip_push: "{{.Env.SKIP_PUSH}}"
    dockerfile: ./docker/Dockerfile
    use: buildx
    build_flag_templates:
      - "--platform=linux/arm64"
      - "--build-arg=PICARD_VERSION={{.Env.PICARD_VERSION}}"
    extra_files:
      - ./target/bin/linux/arm64/orchestrator

  # Windows images
  - id: init-windows-server-2019
    image_templates: ["circleci/runner-init:agent-windows-server-2019{{.Env.IMAGE_TAG_SUFFIX}}"]
    dockerfile: ./docker/windows.Dockerfile
    skip_push: "true" # we push during the build step since we cannot load a Windows image on Linux
    use: buildx
    build_flag_templates:
      - "--builder=circleci-runner-init-windows-builder"
      - "--build-arg=PICARD_VERSION={{.Env.PICARD_VERSION}}"
      - "--build-arg=WINDOWS_VERSION=ltsc2019"
      - "--platform=windows/amd64"
      - "--load=false"
      - "--push={{.Env.PUSH_WINDOWS}}"
      - "--provenance=false"
    extra_files:
      - ./target/bin/windows/amd64/orchestrator.exe
  - id: init-windows-server-2022
    image_templates: ["circleci/runner-init:agent-windows-server-2022{{.Env.IMAGE_TAG_SUFFIX}}"]
    dockerfile: ./docker/windows.Dockerfile
    skip_push: "true" # we push during the build step since we cannot load a Windows image on Linux
    use: buildx
    build_flag_templates:
      - "--builder=circleci-runner-init-windows-builder"
      - "--build-arg=PICARD_VERSION={{.Env.PICARD_VERSION}}"
      - "--build-arg=WINDOWS_VERSION=ltsc2022"
      - "--platform=windows/amd64"
      - "--load=false"
      - "--push={{.Env.PUSH_WINDOWS}}"
      - "--provenance=false"
    extra_files:
      - ./target/bin/windows/amd64/orchestrator.exe
  - id: init-windows-server-2025
    image_templates: ["circleci/runner-init:agent-windows-server-2025{{.Env.IMAGE_TAG_SUFFIX}}"]
    dockerfile: ./docker/windows.Dockerfile
    skip_push: "true" # we push during the build step since we cannot load a Windows image on Linux
    use: buildx
    build_flag_templates:
      - "--builder=circleci-runner-init-windows-builder"
      - "--build-arg=PICARD_VERSION={{.Env.PICARD_VERSION}}"
      - "--build-arg=WINDOWS_VERSION=ltsc2025"
      - "--platform=windows/amd64"
      - "--load=false"
      - "--push={{.Env.PUSH_WINDOWS}}"
      - "--provenance=false"
    extra_files:
      - ./target/bin/windows/amd64/orchestrator.exe

  # Image used in the `circleci-runner` acceptance tests
  - id: testinit-amd64
    image_templates: ["circleci/runner-init:test-agent-amd64"]
    skip_push: "{{ .Env.SKIP_PUSH_TEST_AGENT }}"
    dockerfile: ./docker/test.Dockerfile
    use: buildx
    build_flag_templates:
      - "--platform=linux/amd64"
    extra_files:
      - ./target/bin/linux/amd64/orchestrator
      - ./target/bin/linux/amd64/fake-task-agent

docker_manifests:
  - name_template: "circleci/runner-init:agent{{.Env.IMAGE_TAG_SUFFIX}}"
    image_templates:
      - "circleci/runner-init:agent-amd64{{.Env.IMAGE_TAG_SUFFIX}}"
      - "circleci/runner-init:agent-arm64{{.Env.IMAGE_TAG_SUFFIX}}"
      - "circleci/runner-init:agent-windows-server-2019{{.Env.IMAGE_TAG_SUFFIX}}"
      - "circleci/runner-init:agent-windows-server-2022{{.Env.IMAGE_TAG_SUFFIX}}"
      - "circleci/runner-init:agent-windows-server-2025{{.Env.IMAGE_TAG_SUFFIX}}"
    skip_push: "{{.Env.SKIP_PUSH}}"

  - name_template: "circleci/runner-init:test-agent"
    image_templates:
      - "circleci/runner-init:test-agent-amd64"
    skip_push: "{{ .Env.SKIP_PUSH_TEST_AGENT }}"

docker_signs:
  - cmd: go
    args: ["tool", "cosign", "sign", "--key=cosign.key", "${artifact}@${digest}", "--yes"]
    artifacts: manifests
    stdin: "{{ .Env.COSIGN_PWD }}"
